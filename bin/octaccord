#!/usr/bin/env ruby

if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

ENV["BUNDLE_GEMFILE"] = File.expand_path("../../Gemfile", __FILE__)

require 'rubygems'
require 'bundler/setup'
Bundler.require

require "time"
require "shellwords"
require "pp"

Encoding.default_external="UTF-8"

require "dbm"
class FileStore
  CACHE_FILE = "#{ENV["HOME"]}/.cache/octaccord/http_cache"

  def initialize
    @cache = DBM.open(CACHE_FILE, 0666)
  end

  def read(key)
    if value = @cache[key]
      STDERR.puts "HIT #{key}" if $OCTACCORD_DEBUG

    else
      STDERR.puts "MISS #{key}" if $OCTACCORD_DEBUG
    end
    value
  end

  def write(key, value)
    @cache[key] = value
  end
end

class OctaccordCLI < Thor
  check_unknown_options! :except => :completions
  package_name 'Octaccord'

  class_option :debug, :type => :boolean, :desc => "Set debug flag"

  map ["--version", "-v"] => :version

  default_command :help
  map ["--help", "-h"] => :help

  desc "help [COMMAND]", "Describe available commands or one specific command"
  def help(command = nil)
    super(command)
  end

  desc "version", "Show version"
  def version
    puts Octaccord::VERSION
  end

  ################################################################
  ## Command: scan
  ################################################################
  desc "scan REPOSITORY", "Scan issues"

  long_desc <<-LONGDESC
    scan and print issues in various formats
  LONGDESC

  method_option :format, :desc => "Set printing format", :enum => %w(debug list number pbl table text)
  method_option :type,   :desc => "Set issue type", :enum => %w(pr issue)
  method_option :search, :desc => "Set search query"
  method_option :topology, :desc => "Set information file name for topological sort", :banner => "FILE"

  def scan(repos)
    if options[:topology] == "-"
      orig_text = $stdin.gets(nil)
    elsif options[:topology]
      orig_text = File.open(options[:topology]).gets(nil)
    end
    Octaccord::Command::Scan.new(client, repos, orig_text, **symbolize_keys(options))
  end

  ################################################################
  ## Command: subscriptions
  ################################################################
  desc "subscriptions", "List your watching repositories"

  long_desc <<-LONGDESC
    List your watching repositories
  LONGDESC

  def subscriptions
    client.subscriptions.each do |repos|
      puts repos.full_name
    end
  end

  ################################################################
  ## Command: update_issues
  ################################################################
  desc "update_issues REPOSITORY NUM...", "Update issues"

  long_desc <<-LONGDESC
    update issues in specified repository
  LONGDESC

  method_option "add-label",    :desc => "Add a LABEL to issues", :banner => "LABEL"
  method_option "remove-label", :desc => "Remove a LABEL from issues", :banner => "LABEL"

  def update_issues(repos, *issues)
    Octaccord::Command::UpdateIssues.new(client, repos, issues, **symbolize_keys(options))
  end

  ################################################################
  ## Command: add_collaborator
  ################################################################
  desc "add_collaborator REPOSITORY", "Add collaborator to a REPOSITORY"

  long_desc <<-LONGDESC
    add users or team members to collaborator of repository
  LONGDESC

  method_option :users, :desc => "Add users to collaborator of repository"
  method_option :teams, :desc => "Add team members to collaborator of repository"

  def add_collaborator(repos)
    Octaccord::Command::AddCollaborator.new(client, repos, **symbolize_keys(options))
  end

  ################################################################
  ## Command: comments
  ################################################################
  desc "comments REPOSITORY", "List comments created in a period of time"

  long_desc <<-LONGDESC
    list comments created in a period of time
  LONGDESC

  method_option :since,  :banner => "ISO8601_DATETIME", :desc => "Only comments updated at or after this time"
  method_option :before, :banner => "ISO8601_DATETIME", :desc => "Only comments updated at or before this time"
  def comments(repos)
    since  = Time.iso8601(options[:since])
    before = if options[:before] then Time.iso8601(options[:before]) else Time.now end
    Octaccord::Command::Comments.new(client, repos, since, before)
  end

  ################################################################
  ## Command: completions
  ################################################################
  desc "completions [COMMAND]", "List available commands or options for COMMAND", :hide => true

  long_desc <<-LONGDESC
    List available commands or options for COMMAND
    This is supposed to be a zsh compsys helper"
  LONGDESC

  def completions(*command)
    help = self.class.commands
    global_options = self.class.class_options
    Octaccord::Command::Completions.new(help, global_options, command)
  end

  ################################################################
  ## Command: create_iteration
  ################################################################
  desc "create_iteration REPOSITORY ITERATION_NAME", "Make new iteration record file"

  long_desc <<-LONGDESC
    Make a new iteration record file from skeleton
  LONGDESC

  method_option :start,    :desc => "start date-time", :banner => "ISO8601_DATETIME"
  method_option :due,      :desc => "due date-time", :banner => "ISO8601_DATETIME"
  method_option :manager,  :desc => "set manager name", :banner => "USER"
  method_option :team,     :desc => "set github organization/team style team name"
  method_option :template, :desc => "set ERB template", :banner => "FILE"
  def create_iteration(repos, iteration_name)
    Octaccord::Command::CreateIteration.new(client, repos, iteration_name, **symbolize_keys(options))
  end

  ################################################################
  ## Command: create_issue
  ################################################################
  desc "create_issue REPOSITORY TITLE BODY", "create issue"

  long_desc <<-LONGDESC
    create issues in specified repository
  LONGDESC

  def create_issues(repo, title, body)
    Octaccord::Command::CreateIssue.new(client, repo, title, body, **symbolize_keys(options))
  end

  ################################################################
  ## Command: filter
  ################################################################
  desc "filter", "Decorate markdown as filter"

  def filter
    block_finalize = false
    block_inside   = false
    block_content  = ""
    block_argv     = []

    while line = STDIN.gets # STDIN.noecho(&:gets)
      if /begin:octaccord (.*)-->/ =~ line
        block_inside = true
        block_argv = $1.chomp.shellsplit
        print line
        next
      end

      if /end:octaccord/ =~ line
        orig_stdout = $stdout
        orig_stdin  = $stdin
        $stdout = StringIO.new
        $stdin  = StringIO.new(block_content)
        self.class.start(block_argv)
        result = $stdout.string
        $stdout = orig_stdout
        $stdin  = orig_stdin

        print result
        print line
        block_inside = false
        next
      end

      if block_inside
        block_content << line
      else
        print line.gsub(/(^|[^\[])\#(\d+)/, '\1[#\2](../issues/\2)')
      end
    end
  end

  ################################################################
  ## Command: get_team_members
  ################################################################
  desc "get_team_members ORGANIZATION/TEAM", "Get team members"

  long_desc <<-LONGDESC
    Get team members
  LONGDESC

  def get_team_members(teams)
    Octaccord::Command::GetTeamMembers.new(client, teams, **symbolize_keys(options))
  end

  ################################################################
  ## Command: info
  ################################################################
  desc "info", "Show github remote info"

  def info
    Octaccord::Command::Info.new(client, **symbolize_keys(options))
  end

  ################################################################
  ## Command: show
  ################################################################
  desc "show REPOSITORY NUM", "Show details of issue NUM"

  def show(repos, issue)
    Octaccord::Command::Show.new(client, repos, issue, **symbolize_keys(options))
  end

  ################################################################
  ## patch to insert  setup_global_options
  ################################################################
  no_commands do
    def invoke_command(command, *args)
      setup_global_options
      super
    end
  end

  ################################################################
  ## private
  ################################################################
  private

  def exit_on_error(&block)
    begin
      yield if block_given?
    rescue Octaccord::ConfigurationError => e
      STDERR.print "ERROR: #{e.message}.\n"
      exit 1
    end
  end

  attr_reader :client, :config

  def setup_global_options
    exit_on_error do
      @config ||= Pit.get("github.com", :require => {
        "login"    => "Your login name here",
        "password" => "Your password here"
      })

      $OCTACCORD_DEBUG = true if options[:debug]
      @store ||= FileStore.new
      @stack ||= Faraday::RackBuilder.new do |builder|
        builder.response :logger if options[:debug]
        builder.use Faraday::HttpCache, shared_cache: false, store: @store, serializer: YAML
        builder.use Octokit::Response::RaiseError
        builder.adapter Faraday.default_adapter
      end

      Octokit.middleware = @stack
      Octokit.auto_paginate = true
      @client ||= Octokit::Client.new(:login    => @config["login"],
                                      :password => @config["password"])
    end
  end

  def symbolize_keys(hash)
    Hash[hash.map {|k,v| [k.to_s.gsub('-', '_').to_sym, v]}]
  end

end # class OctaccordCLI

command = OctaccordCLI.start(ARGV)
